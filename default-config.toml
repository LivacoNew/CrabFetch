# For more in-depth configuration documentation, please view https://github.com/LivacoNew/CrabFetch/wiki


# The modules to display and in what order.
# Again for a full list of modules, go to the documentation above.
modules = [
    "hostname",
    "underline:16",

    "cpu",
    "gpu",
    "memory",
    "swap",
    "mounts",
    "host",
    "displays",

    "os",
    "packages",
    "desktop",
    "terminal",
    "shell",
    "editor",
    "uptime",
    "locale",
    "player",
    "initsys",
    "processes",
    "battery",
    "localip",

    "space",
    "colors",
    "bright_colors"
]

# Whether to treat unknown modules as a raw text output, allowing you to use custom strings n stuff.
# Yes, these support color placeholders.
unknown_as_text = false
# Allows custom commands modules to be ran above, by specifying "command:{command}"
# ENABLE THIS WITH CARE! Remember that it's possible to run modules with command-line arguments, so if someone can run CrabFetch they can run any arbitrary command!
allow_commands = false

# The default separator between a modules title and it's value
separator = " > "
# The default color of a modules title
# Can be; black, red, green, yellow, blue, magenta, cyan, white
# All of these can be prefixed with "bright_" to be lighter versions, e.g bright_red
# REQUIRES use_os_color TO BE OFF
title_color = "bright_magenta"
# Whether to bold/italic the title by default too
title_bold = true
title_italic = false

# The default decimal places to provide in a module
decimal_places = 2

# Whether to have all module values as inline, e.g; https://i.imgur.com/UNyq2zj.png
# To add padding use the "separator" and add some spaces
inline_values = false

# The character to use in the underline module
underline_character = '―'

# The character for each color in the colors module
color_character = "   "  # circle: ""
# Margin between each character
color_margin = 0
# And if to set the color to the background instead of on the character
color_use_background = true # Set to false if using something like the circle above

# Whether to use the distro's preferred color for the title and ASCII displays
# Disable to use custom default title colors, or custom ASCII colors
use_os_color = true

# Format of segments
# Segments can be defined in the modules array
segment_top = "{color-white}[======------{color-brightmagenta} {name} {color-white}------======]"
segment_bottom = "{color-white}[======------{color-brightmagenta} {name_sized_gap} {color-white}------======]"

# Formatting characters used in progress bars 
progress_left_border = '['
progress_right_border = ']'
progress_progress = '='
progress_empty = ' '
# The target length of the progress bar
progress_target_length = 20

# Whether to use 'ibibytes opposed to 'gabytes 
# E.g use Gibibytes (GiB) opposed to Gigabytes (GB)
use_ibis = false

# Whether to use known checksums to attempt to find the version of some stuff e.g terminal/shell/editor
# Disabled by default as it was seen as "too cheaty"
# If your benchmarking, disable it as well. If your a end user, you likely won't care if it's on or not.
use_version_checksums = false

# Whether to supress any errors that come or not
suppress_errors = true

# Percentage coloring thresholds 
# Empty this section to make it not color 
# Values are in the format of "{percentage}:{color}"
percentage_color_thresholds = [
    "75:brightgreen",
    "85:brightyellow",
    "90:brightred"
]


[ascii]
# If to display the ASCII distro art or not
display = true
# Which side of the modules to display the ASCII on, left, right, top or bottom
side = "left"
# The amount of space to put between the ASCII and the info
margin = 4

# The coloring mode to use;
# - "raw" leaves the coloring alone, letting it be uncolored, or lets you use escape codes in the ascii override.
# - "os" uses the OS color to color the ASCII in a solid color.
# - "solid" fills the ASCII with a solid color.
# - "band" colors the ascii in a band/flag format.
mode = "os"

# ONLY REQUIRED IF YOU SET THE MODE TO BE "solid"
# The color to fill the ASCII with.
solid_color = "bright_magenta"

# ONLY REQUIRED IF YOU SET THE MODE TO BE "band" OR "bandhorizontal"
# The array of colors to fill the ASCII with.
# "band" is top to bottom, "bandhorizontal" is left to right.
# 
# This array can be as long as the actual ASCII. Each entry represents the color at a certain %
# E.g ["red", "green"] would render the top half as red and the bottom half as green.
# ["yellow", "blue", "magenta"] would render 33.33% as yellow, then blue, than magenta.
band_colors = ["bright_magenta", "bright_cyan", "bright_white", "bright_cyan", "bright_magenta"]




# Below here is the actual modules
# Refer to the wiki for any module-specific parameters or hidden parameters
# Also remember that you can override some stuff on these, e.g the title formatting. Again check the wiki.

[hostname]
# Placeholders;
# {hostname} -> The hostname
# {username} -> The username of the current user
title = ""
format = "{color-title}{username}{color-white}@{color-title}{hostname}"


[cpu]
# Placeholders;
# {name} -> The name of the cpu.
# {core_count} -> The number of cores.
# {thread_count} -> The number of threads.
# {current_clock_mhz} -> The current clock speed, in MHz.
# {current_clock_ghz} -> The current clock speed, in GHz.
# {max_clock_mhz} -> The maximum clock speed, in MHz.
# {max_clock_ghz} -> The maximum clock speed, in GHz.
# {arch} -> The architecture of your CPU.
title = "CPU"
format = "{name} {arch} ({core_count}c {thread_count}t) @ {max_clock_ghz} GHz"

# Whether to attempt to remove any trailing "x-Core Processor" left in the branding name by the manufacturer
# May not be perfect, disable and report an issue if output looks odd.
remove_trailing_processor = true


[gpu]
# Whether to try to search a separate AMD specific file to try to improve accuracy on AMD GPU's 
amd_accuracy = true

# Ignore any GPU's that are marked as "disabled" by Linux
ignore_disabled_gpus = true


# Placeholders;
# - {index} -> The index of the GPU, only useful if you have more than one GPU.
# - {vendor} -> The vendor of the GPU, e.g AMD
# - {model} -> The model of the GPU, e.g Radeon RX 7800XT
# - {vram} -> The total memory of the GPU.
title = "GPU"
format = "{vendor} {model} ({vram})"


[memory]
# Placeholders;
# {used} -> The currently in-use memory.
# {max} -> The maximum total memory.
# {bar} -> A progress bar representing the total space available/taken.
# {percent} -> Percentage of memory used
title = "Memory"
format = "{used} / {max} ({percent})"


[swap]
# Placeholders;
# {used} -> The currently used swap.
# {max} -> The maximum total swap.
# {bar} -> A progress bar representing the total space available/taken.
# {percent} -> Percentage of swap used
title = "Swap"
format = "{used} / {total} ({percent})"


[mounts]
# This module is a multi-line module, each mount has it's own line in the output. 
# Placeholders;
# {device} -> Device, e.g /dev/sda
# {mount} -> The mount point, e.g /home
# {space_used} -> The space used.
# {space_avail} -> The space available.
# {space_total} -> The total space.
# {filesystem} -> The filesystem running on that mount.
# {bar} -> A progress bar representing the total space available/taken.
# {percent} -> The percentage of the disk used.
title = "Disk ({mount})"
format = "{space_used} used of {space_total} ({percent}) [{filesystem}]"

# A ignore list for any point points OR filesystems to ignore
# The entries only need to start with these to be ignored
# It's also worth noting that CrabFetch automatically ignores any non-physical device mount
ignore = []


[host]
# Placeholders;
# {host} -> The name of the host, either a motherboard name or a laptop model
# {chassis} -> The chassis type, e.g Desktop or Laptop or whatever
title = "Host"
format = "{host} ({chassis})"

# Whether to output the chassis on it's own line to remain consistent with other fetch scripts.
newline_chassis = false
# The title/format of the chassis if we are outputting on it's own line
chassis_title = "Chassis"
chassis_format = "{chassis}"


[displays]
# This module is a multi-line module, each display will have it's own line in the output.
# Placeholders;
# {make} -> The monitor's make
# {model} -> The monitor's model
# {name} -> The monitor DRM name, e.g DP-2
# {width} -> The monitor's width
# {height} -> The monitor's height
# {refresh_rate} -> The monitor's refresh rate. This won't work in x11!
title = "Display ({make} {model})"
format = "{width}x{height} @ {refresh_rate}Hz ({name})"

# Whether to scale the width/height according to the screen's scale. Only availabe on Wayland.
# **This will output wrong with fractional scaling**, as the library we use to interact with Wayland doesn't support fractional scaling yet.
scale_size = false


[os]
# Placeholders;
# {distro} -> The distro name
# {kernel} -> The kernel version
title = "Operating System"
format = "{distro} ({kernel})"

# Display the kernel version on a newline and if so, what format to use 
newline_kernel = false
kernel_title = "Kernel"
kernel_format = "Linux {kernel}"


[packages]
# This format is for each entry, with all entries being combined into a single string separated by a comma. Placeholders;
# {manager} -> The name of the manager
# {count} -> The amount of packages that manager reports
title = "Packages"
format = "{count} ({manager})"

# List of package managers to ignore, for whatever reason you choose to
ignore = []


[desktop]
# Placeholders;
# {desktop} -> The name of the desktop
# {display_type} -> The type of display server, aka x11 or wayland.
title = "Desktop"
format = "{desktop} ({display_type})"


[terminal]
# Placeholders;
# {name} -> The name of the terminal, e.g kitty
# {path} -> The path of the terminal, e.g /usr/bin/kitty
# {version} -> The version of the terminal
title = "Terminal"
format = "{name} {version}"


[shell]
# Placeholders;
# {name} -> The name of the shell, e.g zsh
# {path} -> The path of the shell, e.g /usr/bin/zsh
# {version} -> The version of the shell.
title = "Shell"
format = "{name} {version}"

# Whether to show your default shell, instead of your current shell.
show_default_shell = false


[uptime]
title = "Uptime"


[editor]
# Placeholders;
# {name} -> The name of the editor
# {path} -> The path the editor is at
# {version} -> The version of the editor.
title = "Editor"
format = "{name} {version}"

# Whether to turn the name into a "fancy" variant. E.g "nvim" gets turned into "NeoVim"
fancy = true


[locale]
# Placeholders;
# {language} - The selected language
# {encoding} - The encoding selected, most likely UTF-8
title = "Locale"
format = "{language} ({encoding})"


[player]
# This is a multi-line module, each player detected will have it's own line in the output
# Placeholders;
# {player} -> The player currently playing
# {track} - The name of the track
# {album} - The name of the album
# {track_artists} - The names of all track artists
# {album_artists} - The names of all album artists
# {status} - The status of the player, AKA if it's playing or not.
title = "Player ({player})"
format = "{track} by {track_artists} ({album}) [{status}]"

# Any music players to ignore
# These must be valid MPRIS player strings. You can find them by running something like `playerctl --list-all`
ignore = []


[battery]
# Placeholders;
# {index} -> The batterys index
# {percentage} -> The battery percentage
# {bar} -> A progeress bar representing how full the battery is
title = "Battery {index}"
format = "{percentage}%"


[initsys]
# Placeholders;
# {name} -> The name of the init system
# {path} -> The path to the init system binary
# {version} -> The version of the init system
title = "Init System"
format = "{name} {version}"


[processes]
title = "Total Processes"


[datetime]
title = "Date Time"
# Available placeholders; https://docs.rs/chrono/latest/chrono/format/strftime/index.html#specifiers
# CrabFetch wiki page coming soon for it instead (tm)
format = "%H:%M:%S on %e %B %G"

[localip]
# This is a multi-line module, each IP/interface detected will have it's own line in the output
# Placeholders;
# {interface} -> The name of the interface, along with if it's IPV4 or IPV6
# {addr} -> The IP address
title = "Local IP ({interface})"
format = "{addr}"



# You've reached the end! Congrats, have a muffin :)
